name: "GitHub to GitLab Repository Sync"
description: "This GitHub Action syncs repositories from GitHub to GitLab, ensuring that the latest changes from GitHub are reflected in corresponding GitLab repositories."
author: "fscarmen2"
outputs:
  result:
        description: "A summary of the sync operation, including which repositories were updated and which were skipped."

runs:
  using: composite
  steps:
    - name: Runing
      run: |
        echo "开始从 GitHub 主库克隆到 GitLab 备份库"

        # 从 Action runner 的 env 环境变量获取 ACCOUNT_ID, WORKER_NAME 和 API_TOKEN
        ACCOUNT_ID="${{ env.ACCOUNT_ID }}"
        WORKER_NAME="${{ env.WORKER_NAME }}"
        API_TOKEN="${{ env.API_TOKEN }}"

        [ -z "$ACCOUNT_ID" ] && SECRET+=(ACCOUNT_ID)
        [ -z "$WORKER_NAME" ] && SECRET+=(WORKER_NAME)
        [ -z "$API_TOKEN" ] && SECRET+=(API_TOKEN)
        [ "${#SECRET[@]}" != '0' ] && echo "Secret 里缺少变量 ${SECRET[@]}，请检测！" && exit 1

        # 获取 worker 包含账户信息的内容
        WORKER=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/workers/scripts/$WORKER_NAME" \
             -H "Authorization: Bearer $API_TOKEN" \
             -H "Content-Type: application/json" | sed -n '/name="worker.js"/,/async function getSignedUrl/p')

        # 获取 GitLab 账户信息
        GITLAB_REPO=($(sed -n '/const GITLAB_CONFIGS = \[/,/\];/p' <<< "$WORKER" | grep -oP "name:\s*'\K[^']+"))
        GITLAB_ID=($(sed -n '/const GITLAB_CONFIGS = \[/,/\];/p' <<< "$WORKER" | grep -oP "id:\s*'\K[^']+"))
        GITLAB_TOKEN=($(sed -n '/const GITLAB_CONFIGS = \[/,/\];/p' <<< "$WORKER" | grep -oP "token:\s*'\K[^']+"))
        GITLAB_USERNAME=$(curl --silent --header "PRIVATE-TOKEN: ${GITLAB_TOKEN[0]}" "https://gitlab.com/api/v4/projects/${GITLAB_ID[0]}" | jq -r '.namespace.path')

        # 获取 GitHub 账户信息
        GITHUB_REPO=(${GITLAB_REPO[@]})
        GITHUB_TOKEN=$(sed -n "s/^const GITHUB_PAT = '\(.*\)'.*/\1/gp" <<< "$WORKER")
        GITHUB_USERNAME=$(sed -n "s/^const GITHUB_USERNAME = '\(.*\)'.*/\1/gp" <<< "$WORKER")

        # 初始化更新和未更新仓库的数组
        UPDATED_REPOS=()
        NOT_UPDATED_REPOS=()

        # 同步函数
        sync_repo() {
          local i=$1
          echo "================================="
          echo "同步 GitHub: ${GITHUB_REPO[i]} --→ GitLab: ${GITLAB_REPO[i]}"

          # 获取 GitHub 仓库的最新 commit SHA
          local GITHUB_SHA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                         "https://api.github.com/repos/$GITHUB_USERNAME/${GITHUB_REPO[i]}/commits/main" | \
                         jq -r .sha)

        # 如果 GitHub SHA 为 null，跳过这个仓库
        if [ "$GITHUB_SHA" = "null" ]; then
            echo "GitHub 仓库 ${GITHUB_REPO[i]} 未找到或为空，跳过"
            NOT_UPDATED_REPOS+=("${GITHUB_REPO[i]}")
            return
        fi

        # 获取 GitLab 仓库的最新 commit SHA
        local GITLAB_SHA=$(curl -s -H "PRIVATE-TOKEN: ${GITLAB_TOKEN[i]}" \
                       "https://gitlab.com/api/v4/projects/${GITLAB_USERNAME}%2F${GITLAB_REPO[i]}/repository/branches/main" | \
                       jq -r .commit.id)

        # 如果 SHA 不同，则进行同步
        if [ "$GITHUB_SHA" != "$GITLAB_SHA" ]; then
            echo "GitHub: ${GITHUB_REPO[i]} 有更新，同步中"

            # 克隆 GitHub 仓库
            git clone https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com/${GITHUB_USERNAME}/${GITHUB_REPO[i]}.git
            cd ${GITHUB_REPO[i]}

            # 设置 GitLab 远程仓库并强制推送
            git remote add gitlab https://${GITLAB_USERNAME}:${GITLAB_TOKEN[i]}@gitlab.com/${GITLAB_USERNAME}/${GITLAB_REPO[i]}.git
            git push -f gitlab main

            cd ..
            rm -rf ${GITHUB_REPO[i]}

            echo "已同步 ${GITHUB_REPO[i]} 到 GitLab ${GITLAB_REPO[i]}"
            UPDATED_REPOS+=("${GITHUB_REPO[i]}")
        else
            echo "${GITHUB_REPO[i]} 无变化，跳过"
            NOT_UPDATED_REPOS+=("${GITHUB_REPO[i]}")
          fi
        }

        # 主循环
        for i in "${!GITLAB_REPO[@]}"; do
            sync_repo $i
        done

        # 打印总结
        echo "================================="
        echo "集群各节点同步总结:"
        echo "现有节点: $(( ${#UPDATED_REPOS[*]} + ${#NOT_UPDATED_REPOS[*]} ))"
        echo "已更新的节点: ${UPDATED_REPOS[*]}"
        echo "未更新的节点: ${NOT_UPDATED_REPOS[*]}"

      shell: bash